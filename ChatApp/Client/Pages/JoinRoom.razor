@page "/"
@page "/joinroom"
@page "/joinroom/{CreateRoom:bool}"
@using ChatApp.Client.Services
@using System.Net.Http.Formatting
@inject NavigationManager navigationManager
@inject StateService State
@inject HttpClient Http
@inject IMatDialogService MatDialogService

<h1>Welcome @State.username to Bob Lee's Chatroom</h1>
@if (State.logged)
{
    if (!CreateRoom)
    {
        <div class="wrapper">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12 mat-elevation-z5 index-row-item mdc-theme--surface" style=" display: flex; text-align:center; padding: 20px 40px;">
                <div class="form">
                    <div class="room-join" style="margin-right: 20px;">
                        <h4>Join Room</h4>
                        <MatTextField @bind-Value="@roomid" Label="RoomId" Required="true"></MatTextField><br />
                        <MatTextField @bind-Value="@password" Label="Password" Type="password" Required="false"></MatTextField><br />
                        <p>Can't find a room? <a @onclick="() => { roomid = string.Empty; password = string.Empty; CreateRoom = true; }" href="joinroom/true">Create a new room</a> or <span @onclick="GetPublicRooms" class="link">Show all public rooms</span></p>
                        <MatButton Raised="true" @onclick="JoinNewRoom">Join</MatButton>
                    </div>
                    @if (loading)
                    {
                        <div style="margin-top: 5px;">
                            <span style="text-align:left;"><MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Small" Style="padding-top: 5px;" /></span> Joining room...
                        </div>
                    }
                </div>
                <div class="room-list" style="margin-left: 10px; padding-left: 38px; border-left: 1px solid grey;">
                    <h4 style="text-align:center;">Your rooms</h4>
                    <ul style="max-height: 220px; padding:0; overflow-y: scroll;">
                        <Virtualize Items="State.rooms" Context="room">
                            <li style="list-style: none;">
                                <span class="link" @onclick="async () => { await JoinOldRoom(room); }">@room</span>
                            </li>
                            <hr />
                        </Virtualize>
                    </ul>
                </div>
            </div>
        </div>
        if (ShowPublicRooms)
        {
            <div style="max-height: 500px; overflow-y:scroll; margin-top: 30px; width: 100%;">
                <table style="width: 100%;">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody>
                        <Virtualize Context="room" Items="@PublicRooms">
                            <tr>
                                <td><span class="link" @onclick="async () => { roomid = room.Item1; await JoinNewRoom(); }">@room.Item1</span></td>
                                <td>@room.Item2</td>
                            </tr>
                        </Virtualize>
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <div class="wrapper">
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12 mat-elevation-z5 index-row-item mdc-theme--surface" style="text-align:center; padding: 20px 40px;">
                <div class="form">
                    <h4>Create Room</h4>
                    <MatTextField @bind-Value="@roomname" Label="Room's Name" Required="true"></MatTextField><br />
                    <MatTextField @bind-Value="@roomid" Label="RoomId" Required="true"></MatTextField><br />
                    <MatTextField @bind-Value="@password" Label="Password" Type="password" Required="true"></MatTextField><br />
                    <MatRadioGroup @bind-Value="state">
                        <MatRadioButton Value="false" Style="padding-bottom: 13px;"></MatRadioButton><span>Private</span>
                        <MatRadioButton Value="true" Style="padding-bottom: 13px;"></MatRadioButton><span>Public</span>
                    </MatRadioGroup><br />
                    <MatButton Raised="true" @onclick="CreateNewRoom">Create</MatButton>
                </div>
                @if (loading)
                {
                    <div style="margin-top: 5px;">
                        <span style="text-align:left;"><MatProgressCircle Indeterminate="true" Size="MatProgressCircleSize.Small" Style="padding-top: 5px;" /></span> Creating new room...
                    </div>
                }
            </div>
        </div>
    }

}

@code {
    [Parameter]
    public bool CreateRoom { get; set; } = false;
    private bool loading = false;
    private bool state = false;
    private bool ShowPublicRooms = false;
    private string roomname = string.Empty;
    private string roomid = string.Empty;
    private string password = string.Empty;
    private List<Tuple<string, string>> PublicRooms = new();

    protected override void OnInitialized()
    {
        State.updateTimer.Stop();
        if (!State.logged)
        {
            navigationManager.NavigateTo("/login");
        }
    }

    private async Task GetPublicRooms()
    {
        if (ShowPublicRooms)
        {
            ShowPublicRooms = false;
        }
        else
        {
            PublicRooms = await Http.GetFromJsonAsync<List<Tuple<string, string>>>("Rooms/rooms");
            ShowPublicRooms = true;
        }
    }

    private async Task JoinNewRoom()
    {
        loading = true;
        var response = await Http.PostAsJsonAsync<string>($"Rooms/join-room/{State.username}/{roomid}", password);
        var res = await response.Content.ReadAsAsync<SignResult>(new[] { new JsonMediaTypeFormatter() });
        if (res.success)
        {
            loading = false;
            State.rooms.Add(roomid);
            State.roomid = roomid;
            navigationManager.NavigateTo("/chat-room");
        }
        else
        {
            loading = false;
            await MatDialogService.AlertAsync(res.err);
        }
    }

    private bool RoomIdCheck()
    {
        var check = "1234567890".ToHashSet();
        if (roomid.Length != 6)
        {
            return false;
        }
        foreach (char c in roomid)
        {
            if (!check.Contains(c))
            {
                return false;
            }
        }
        return true;
    }

    private async Task JoinOldRoom(string id)
    {
        loading = true;
        State.roomid = id;
        await Http.PostAsJsonAsync<string>("Rooms/inject-memory", id);
        navigationManager.NavigateTo("/chat-room");
    }

    private async Task CreateNewRoom()
    {
        loading = true;
        if (!state)
        {
            if (string.IsNullOrWhiteSpace(password) || password.Length < 6 || password.Length > 15)
            {
                loading = false;
                await MatDialogService.AlertAsync("Invalid password, your password must not be empty, has length less than 6 characters");
                return;
            }
        }
        if (!RoomIdCheck())
        {
            loading = false;
            await MatDialogService.AlertAsync("Invalid RoomId, your RoomId must be a 6-digit code");
            return;
        }
        if (string.IsNullOrWhiteSpace(roomname))
        {
            loading = false;
            await MatDialogService.AlertAsync("Your room must have a name");
            return;
        }
        roomname = roomname.Trim();
        Room room = new() { Id = roomid, name = roomname, password = password, state = state };
        var response = await Http.PostAsJsonAsync<Room>($"Rooms/create-room/{State.username}", room);
        var res = await response.Content.ReadAsAsync<SignResult>(new[] { new JsonMediaTypeFormatter() });
        if (res.success)
        {
            loading = false;
            State.roomid = roomid;
            State.rooms.Add(roomid);
            navigationManager.NavigateTo("/chat-room");
        }
        else
        {
            loading = false;
            await MatDialogService.AlertAsync(res.err);
        }
    }
}
